{"ast":null,"code":"import _slicedToArray from \"/Users/pmatta/Desktop/developer_personal/apartment-front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pmatta/Desktop/developer_personal/apartment-front-end/src/components/sidebar/AppMenuItem-v2-implementation.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconExpandLess from \"@material-ui/icons/ExpandLess\";\nimport IconExpandMore from \"@material-ui/icons/ExpandMore\"; // React runtime PropTypes\n\nexport const AppMenuItemPropTypes = {\n  name: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  Icon: PropTypes.elementType,\n  items: PropTypes.array\n}; // TypeScript compile-time props type, infered from propTypes\n// https://dev.to/busypeoples/notes-on-typescript-inferring-react-proptypes-1g88\n//AppMenuItemPropTypes = PropTypes.InferProps<AppMenuItemPropTypes>\n//AppMenuItemPropsWithoutItems = Omit<AppMenuItemPropTypes, 'items'>\n// Improve child items declaration\n//export type AppMenuItemProps = AppMenuItemPropsWithoutItems & {\n//items: AppMenuItemProps[]\n\nconst AppMenuItem = props => {\n  const name = props.name,\n        link = props.link,\n        Icon = props.Icon,\n        _props$items = props.items,\n        items = _props$items === void 0 ? [] : _props$items;\n  const classes = useStyles();\n  const isExpandable = items && items.length > 0;\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  function handleClick() {\n    setOpen(!open);\n  }\n\n  function ListItemLink(props) {\n    return React.createElement(ListItem, Object.assign({\n      button: true,\n      component: \"a\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }\n\n  const MenuItemRoot = React.createElement(ListItem, {\n    button: true,\n    className: classes.menuItem,\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, !!Icon && React.createElement(ListItemIcon, {\n    className: classes.menuItemIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(ListItemLink, {\n    href: link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: name,\n    inset: !Icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), isExpandable && !open && React.createElement(IconExpandMore, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), isExpandable && open && React.createElement(IconExpandLess, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n  const MenuItemChildren = isExpandable ? React.createElement(Collapse, {\n    in: open,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(List, {\n    component: \"div\",\n    disablePadding: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, items.map((item, index) => React.createElement(AppMenuItem, Object.assign({}, item, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))))) : null;\n  return React.createElement(React.Fragment, null, MenuItemRoot, MenuItemChildren);\n};\n\nAppMenuItem.propTypes = AppMenuItemPropTypes;\nconst useStyles = makeStyles(theme => createStyles({\n  menuItem: {},\n  menuItemIcon: {\n    color: \"#3f51b5\"\n  }\n}));\nexport default AppMenuItem;","map":{"version":3,"sources":["/Users/pmatta/Desktop/developer_personal/apartment-front-end/src/components/sidebar/AppMenuItem-v2-implementation.js"],"names":["React","PropTypes","makeStyles","createStyles","List","ListItem","ListItemIcon","ListItemText","Divider","Collapse","IconExpandLess","IconExpandMore","AppMenuItemPropTypes","name","string","isRequired","link","Icon","elementType","items","array","AppMenuItem","props","classes","useStyles","isExpandable","length","useState","open","setOpen","handleClick","ListItemLink","MenuItemRoot","menuItem","menuItemIcon","MenuItemChildren","map","item","index","propTypes","theme","color"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\n\r\nimport IconExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport IconExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\n// React runtime PropTypes\r\nexport const AppMenuItemPropTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  link: PropTypes.string,\r\n  Icon: PropTypes.elementType,\r\n  items: PropTypes.array\r\n};\r\n\r\n// TypeScript compile-time props type, infered from propTypes\r\n// https://dev.to/busypeoples/notes-on-typescript-inferring-react-proptypes-1g88\r\n//AppMenuItemPropTypes = PropTypes.InferProps<AppMenuItemPropTypes>\r\n//AppMenuItemPropsWithoutItems = Omit<AppMenuItemPropTypes, 'items'>\r\n\r\n// Improve child items declaration\r\n//export type AppMenuItemProps = AppMenuItemPropsWithoutItems & {\r\n//items: AppMenuItemProps[]\r\n\r\nconst AppMenuItem = props => {\r\n  const { name, link, Icon, items = [] } = props;\r\n  const classes = useStyles();\r\n  const isExpandable = items && items.length > 0;\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClick() {\r\n    setOpen(!open);\r\n  }\r\n\r\n  function ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n  }\r\n\r\n  const MenuItemRoot = (\r\n    <ListItem button className={classes.menuItem} onClick={handleClick}>\r\n      {/* Display an icon if any */}\r\n      {!!Icon && (\r\n        <ListItemIcon className={classes.menuItemIcon}>\r\n          <Icon />\r\n        </ListItemIcon>\r\n      )}\r\n      <ListItemLink href={link}>\r\n        <ListItemText primary={name} inset={!Icon} />\r\n      </ListItemLink>\r\n      {/* Display the expand menu if the item has children */}\r\n      {isExpandable && !open && <IconExpandMore />}\r\n      {isExpandable && open && <IconExpandLess />}\r\n    </ListItem>\r\n  );\r\n\r\n  const MenuItemChildren = isExpandable ? (\r\n    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n      <Divider />\r\n      <List component=\"div\" disablePadding>\r\n        {items.map((item, index) => (\r\n          <AppMenuItem {...item} key={index} />\r\n        ))}\r\n      </List>\r\n    </Collapse>\r\n  ) : null;\r\n\r\n  return (\r\n    <>\r\n      {MenuItemRoot}\r\n      {MenuItemChildren}\r\n    </>\r\n  );\r\n};\r\n\r\nAppMenuItem.propTypes = AppMenuItemPropTypes;\r\n\r\nconst useStyles = makeStyles(theme =>\r\n  createStyles({\r\n    menuItem: {},\r\n    menuItemIcon: {\r\n      color: \"#3f51b5\"\r\n    }\r\n  })\r\n);\r\n\r\nexport default AppMenuItem;\r\n"]},"metadata":{},"sourceType":"module"}